#!/bin/bash

do_help()
{
	echo "Usage:" >&2
	echo "" >&2
	echo "$0 set [key] [value]" >&2
	echo "Valid keys: audio_card, output_device, volume_level" >&2
	echo "" >&2
	echo "or" >&2
	echo "" >&2
	echo "$0 get [key]" >&2
	echo "Valid keys: audio_info, audio_cards, audio_device, output_devices, audio_card, output_device, volume_control, volume_level, hw_audio_card_name_by_index <CARD_INDEX>, hw_audio_card_name_by_name <NAME>, hw_audio_card_index_by_name <NAME>" >&2
	echo "" >&2
	echo "or" >&2
	echo "" >&2
	echo "$0 toggle (between Speaker or Headphone)" >&2
	echo "$0 is_usb_audio_connected" >&2
	echo "$0 is_usb_audio_default_card" >&2
	echo "$0 is_hdmi_audio_connected" >&2
	echo "$0 is_hdmi_default_card" >&2
	echo "$0 is_bluetooth_audio_connected" >&2
	echo "$0 is_bluetooth_default_card" >&2
	echo "$0 is_rk817_default_card" >&2
	echo "$0 config_sound_card" >&2
}

is_usb_audio_connected()
{
	#print_log $LOG_FILE "INFO" "Executing 'is_usb_audio_connected()'"

	if [[ $(aplay -l | grep -c 'USB Audio') -gt 0 ]]; then
		# USB audio devices connected
		#print_log $LOG_FILE "INFO" "is_usb_audio_connected() - One USB Audio Device connected"
		return 0
	fi
	#print_log $LOG_FILE "INFO" "is_usb_audio_connected() - No USB Audio Device connected"
	# NO USB audio devices connected
	return 1
}

is_usb_audio_default_card()
{
	#print_log $LOG_FILE "INFO" "Executing 'is_usb_audio_default_card()'"

	is_usb_audio_connected
	if [ $? -eq 0 ]; then
		local index=$(get_hw_audio_card_index_by_name usb)
		index="${index/:/}"
		if [[ $(cat "$ALSA_CFG_FILE" | grep -ic "hw:${index},") -gt 0 ]]; then
			# USB audio card is the default
			#print_log $LOG_FILE "INFO" "is_usb_audio_default_card() - The USB Audio card, is the default audio card"
			return 0
		fi
	fi
	# NO USB audio devices connected
	#print_log $LOG_FILE "INFO" "is_usb_audio_default_card() - The USB Audio card, is NOT the default audio card"
	return 1
}

is_hdmi_audio_connected()
{
	#print_log $LOG_FILE "INFO" "Executing 'is_hdmi_audio_connected()'"

	es-display is_hdmi_mode
	if [ $? -eq 0 ]; then
		# HDMI audio device connected
		#print_log $LOG_FILE "INFO" "is_hdmi_audio_connected() - The HDMI audio device connected"
		return 0
	fi
	# NO HDMI audio device connected
	#print_log $LOG_FILE "INFO" "is_hdmi_audio_connected() - NO HDMI audio device connected"
	return 1
}

is_hdmi_default_card()
{
	#print_log $LOG_FILE "INFO" "Executing 'is_hdmi_default_card()'"

	is_hdmi_audio_connected
	if [ $? -eq 0 ]; then
		# HDMI mode
		local index=$(get_hw_audio_card_index_by_name hdmi)
		index="${index/:/}"
		if [[ $(cat "$ALSA_CFG_FILE" | grep -ic "hw:${index},") -gt 0 ]]; then
			# HDMI audio card is the default
			#print_log $LOG_FILE "INFO" "is_hdmi_default_card() - The HDMI Audio card, is the default audio card"
			return 0
		fi
	fi
	# NO HDMI audio card is the default
	#print_log $LOG_FILE "INFO" "is_hdmi_default_card() - The HDMI Audio card, is NOT the default audio card"
	return 1
}

is_bluetooth_audio_connected()
{
	#print_log $LOG_FILE "INFO" "Executing 'is_bluetooth_audio_connected()'"

	es-bluetooth is_bluetooth_audio_device_connected
	if [ $? -eq 0 ]; then
		# BT audio device connected
		#print_log $LOG_FILE "INFO" "is_bluetooth_audio_connected() - Bluetooth audio device connected"
		return 0
	fi
	#print_log $LOG_FILE "INFO" "is_bluetooth_audio_connected() - Bluetooth audio device not connected"
	# NOBT audio device connected
	return 1
}

is_bluetooth_default_card()
{
	#print_log $LOG_FILE "INFO" "Executing 'is_bluetooth_default_card()'"

	is_bluetooth_audio_connected
	if [ $? -eq 0 ] && [[ $(cat "$ALSA_CFG_FILE" | grep -ic bluetooth) -gt 0 ]]; then
		# BT audio card is the default
		#print_log $LOG_FILE "INFO" "is_bluetooth_default_card() - The Bluetooth Audio card, is the default audio card"
		return 0
	fi
	# NO BT audio card is the default
	#print_log $LOG_FILE "INFO" "is_bluetooth_default_card() - The Bluetooth Audio card, is NOT the default audio card"
	return 1
}

is_rk817_default_card()
{
	#print_log $LOG_FILE "INFO" "Executing 'is_rk817_default_card()'"

	local index=$(get_hw_audio_card_index_by_name rk817)
	index="${index/:/}"
	if [[ $(cat "$ALSA_CFG_FILE" | grep -ic "hw:${index},") -gt 0 ]]; then
		# rk817 audio card is the default
		#print_log $LOG_FILE "INFO" "is_rk817_default_card() - The RK817 Audio card, is the default audio card"
		return 0
	fi
	# NO rk817 audio card is the default
	#print_log $LOG_FILE "INFO" "is_rk817_default_card() - The RK817 Audio card, is NOT the default audio card"
	return 1
}

is_headphone_connected()
{
	#print_log $LOG_FILE "INFO" "Executing 'is_headphone_connected()'"

	# TODO
	if [[ $(cat /sys/class/extcon/rk-headset/state | grep -c "1") -gt 0 ]]; then
		# Headphone/Headset connected
		#print_log $LOG_FILE "INFO" "is_headphone_connected() - Headphone/Headset connected"
		return 0
	fi
	# NO headphone connected
	#print_log $LOG_FILE "INFO" "is_headphone_connected() - NO headphone connected"
	return 1
}

get_output_device()
{
	#print_log $LOG_FILE "INFO" "Executing 'get_output_device()'"

	is_bluetooth_default_card
	if [ $? -eq 0 ]; then
		# BT audio device
		local output_device=`es-bluetooth audio_device_connected`
		#print_log $LOG_FILE "DEBUG" "Executing 'get_output_device()' - Getting Bluetooth output device: '$output_device'"
		echo "${output_device^^}"
		return
	fi

	is_hdmi_default_card
	if [ $? -eq 0 ]; then
		# HDMI audio device
		#print_log $LOG_FILE "INFO" "Executing 'get_output_device()' - Getting Bluetooth output device: 'HDMI'"
		echo "HDMI"
		return
	fi

	is_usb_audio_default_card
	if [ $? -eq 0 ]; then
		# USB audio device
		local output_device=`awk -F'[][]' '{ print $2 }' <(aplay -l | grep -i usb)`
		#print_log $LOG_FILE "DEBUG" "Executing 'get_output_device()' - Getting USB Audio output device: '$output_device'"
		echo "${output_device^^}"
		return
	fi

	local output_device=`awk -F'[=]' '/values=/ { print $2 }' <(amixer cget name='Playback Path' 2> /dev/null | grep ": values=")`
	if [ ! -z "$output_device" ]; then
		output_device=`awk -F"['\'']" '{ print $2 }' <(amixer cget name='Playback Path' 2> /dev/null | grep "#$output_device")`
		#print_log $LOG_FILE "DEBUG" "Executing 'get_output_device()' - Getting output device: '$output_device'"
	fi

	if [ -z "$output_device" ]; then
		#print_log $LOG_FILE "DEBUG" "Executing 'get_output_device()' - Output device is empty, setting default value 'SPK'"
		output_device="SPK"
	fi

	#print_log $LOG_FILE "INFO" "Executing 'get_output_device()' - device: '$output_device'"
	echo "$output_device"
}

do_get_volume_level()
{
	#print_log $LOG_FILE "INFO" "Executing 'do_get_volume_level()'"

	local volume_control="$(get_volume_control)"
	#print_log $LOG_FILE "DEBUG" "Executing 'do_get_volume_level()' - volume control: '$volume_control'"

	local volume=`awk -F'[][%]' '/Left:/ { print $2 }' <(amixer sget "$volume_control" 2> /dev/null)`
	#print_log $LOG_FILE "DEBUG" "Executing 'do_get_volume_level()' - volume: $volume%"
	echo "$volume"
}

do_set_volume_level()
{
	local value=$1
	#print_log $LOG_FILE "INFO" "Executing 'do_set_volume_level()' - volume: $value%"

	local volume_control="$(get_volume_control)"
	#print_log $LOG_FILE "DEBUG" "Executing 'do_set_volume_level()' - volume control: '$volume_control', volume: $value%"

	amixer sset "$volume_control" "$value%" 2>&1 > /dev/null
}

do_set_output_device()
{
	local value=$1

	#print_log $LOG_FILE "INFO" "Executing 'do_set_output_device()', value: '$value'"

	is_bluetooth_default_card
	if [ $? -eq 0 ]; then
		# bluetooth audio card, skip
		#print_log $LOG_FILE "DEBUG" "do_set_output_device() - Bluetooth audio card, skip"
		return
	fi

	is_hdmi_default_card
	if [ $? -eq 0 ]; then
		# HDMI audio card, skip
		#print_log $LOG_FILE "DEBUG" "Executing 'do_set_output_device()' - HDMI audio card, skip"
		return
	fi

	is_usb_audio_default_card
	if [ $? -eq 0 ]; then
		# USB audio device, skip
		#print_log $LOG_FILE "DEBUG" "do_set_output_device() - USB audio card, skip"
		return
	fi

	local output_device=$(get_output_device)
	if [[ "$output_device" = *"HP" ]]; then
		if [ "$value" = "SPK" ]; then
			amixer cset name='Playback Path' "OFF" > /dev/null
			local volume=$(do_get_volume_level)
			local step=10
			if [ $volume -lt 50 ]; then
				step=5
			fi
			volume=$(($volume+$step))
			do_set_volume_level $volume
			#print_log $LOG_FILE "DEBUG" "do_set_output_device() - Switching from '$output_device' to 'SPK', volume: $volume%"
		fi
	elif [ "$output_device" = "SPK" ]; then
		if [[ "$value" = *"HP" ]]; then
			amixer cset name='Playback Path' "OFF" > /dev/null
			local volume=$(do_get_volume_level)
			local step=10
			if [ $volume -lt 50 ]; then
				step=5
			fi
			volume=$(($volume-$step))
			do_set_volume_level $volume
			#print_log $LOG_FILE "DEBUG" "do_set_output_device() - Switching from '$output_device' to 'HP', volume: $volume%"
		fi
	fi
	amixer cset name='Playback Path' $value > /dev/null
}

do_set_audio_card()
{
	local audio_card=${1^^}

	if [ -z "$audio_card" ]; then
		audio_card="DEFAULT"
	fi
	#print_log $LOG_FILE "INFO" "Executing 'do_set_audio_card()' - audio card: '$audio_card'"

	if [[ "$audio_card" == *"BLUETOOTH"* ]]; then
		is_bluetooth_default_card
		if [ $? -eq 0 ]; then
			# BT is default card, skip
			#print_log $LOG_FILE "DEBUG" "do_set_audio_card() - Bluetooth audio card already setted, skip"
			return 0
		fi

		is_bluetooth_audio_connected
		if [ $? -eq 0 ]; then
			# BT audio device connected
			#print_log $LOG_FILE "WARNING" "Executing 'do_set_audio_card()' - Setting the Bluetooth audio card"
			cp -f "$ALSA_BT_CFG_FILE" "$ALSA_CFG_FILE"
			return 0
		fi
	fi

	if [[ "$audio_card" == *"HDMI"* ]]; then
		is_hdmi_default_card
		if [ $? -eq 0 ]; then
			# HDMI is default card, skip
			#print_log $LOG_FILE "DEBUG" "do_set_audio_card() - HDMI audio card already setted, skip"
			return 0
		fi

		is_hdmi_audio_connected
		if [ $? -eq 0 ]; then
			#print_log $LOG_FILE "DEBUG" "Executing 'do_set_audio_card()' - Setting the HDMI audio card"
			local index=$(get_hw_audio_card_index_by_name hdmi)
			index="${index/:/}"
			cp -f "$ALSA_TEMPLATE_CFG_FILE" "$ALSA_CFG_FILE"
			sed -i 's/_AUDIO_CARD_NAME_/HDMI AUDIO/g; s/_AUDIO_CARD_INDEX_/'"$index"'/g' "$ALSA_CFG_FILE"

			if [[ $(cat "$ALSA_CFG_FILE" | grep -c "hw:${index},0") -gt 0 ]]; then
				# USB audio card succesfully configured
				#print_log $LOG_FILE "INFO" "Executing 'do_set_audio_card()' - HDMI card configured at index '$index' successfully"
				return 0
			fi
		fi
	fi

	if [[ "$audio_card" == *"USB"* ]]; then
		is_usb_audio_default_card
		if [ $? -eq 0 ]; then
			# USB Audio is default card, skip
			#print_log $LOG_FILE "DEBUG" "do_set_audio_card() - USB audio card already setted, skip"
			return 0
		fi

		is_usb_audio_connected
		if [ $? -eq 0 ]; then
			# USB Audio device connected
			local index=$(get_hw_audio_card_index_by_name usb)
			index="${index/:/}"
			#print_log $LOG_FILE "DEBUG" "Executing 'do_set_audio_card()' - USB AUDIO card at index '$index'"
			if [ ! -z "$index" ]; then
				cp -f "$ALSA_TEMPLATE_CFG_FILE" "$ALSA_CFG_FILE"
				sed -i 's/_AUDIO_CARD_NAME_/USB AUDIO/g; s/_AUDIO_CARD_INDEX_/'"$index"'/g' "$ALSA_CFG_FILE"

				if [[ $(cat "$ALSA_CFG_FILE" | grep -c "hw:${index},0") -gt 0 ]]; then
					# USB audio card succesfully configured
					#print_log $LOG_FILE "INFO" "Executing 'do_set_audio_card()' - USB AUDIO card configured at index '$index' successfully"
					amixer sset Speaker 100% 2>&1 > /dev/null
					amixer sset Master 40% 2>&1 > /dev/null
					return 0
				fi
				#print_log $LOG_FILE "ERROR" "Executing 'do_set_audio_card()' - USB AUDIO card configured at index '$index' failed"
			fi
		fi
	fi

	if [[ "$audio_card" == *"DEFAULT"* ]]; then
		is_rk817_default_card
		if [ $? -eq 0 ]; then
			# rk817 is default card, skip
			#print_log $LOG_FILE "DEBUG" "do_set_audio_card() - RK817 audio card already setted, skip"
			return 0
		fi

		local index=$(get_hw_audio_card_index_by_name rk817)
		index="${index/:/}"
		#print_log $LOG_FILE "DEBUG" "Executing 'do_set_audio_card()' - RK817 audio card at index '$index'"
		if [ ! -z "$index" ]; then
			cp -f "$ALSA_TEMPLATE_CFG_FILE" "$ALSA_CFG_FILE"
			sed -i 's/_AUDIO_CARD_NAME_/DEFAULT AUDIO/g; s/_AUDIO_CARD_INDEX_/'"$index"'/g' "$ALSA_CFG_FILE"

			if [[ $(cat "$ALSA_CFG_FILE" | grep -c "hw:${index},0") -gt 0 ]]; then
				# rk817 audio card succesfully configured
				#print_log $LOG_FILE "INFO" "Executing 'do_set_audio_card()' - RK817 audio card configured at index '$index' successfully"
				return 0
			fi
			#print_log $LOG_FILE "ERROR" "Executing 'do_set_audio_card()' - RK817 audio card configured at index '$index' failed"
		fi

	fi

	#print_log $LOG_FILE "INFO" "Executing 'do_set_audio_card()' - configuring DEFAULT/HDMI sound card"
	cp -f "$ALSA_DEFAULT_CFG_FILE" "$ALSA_CFG_FILE"
	return 0
}

config_set_value()
{
	local key=$1
	local value=$2

	#print_log $LOG_FILE "INFO" "Executing 'config_set_value()' - key: '$key', value: '$value'"

	case "${key}" in
			"audio_card")
				do_set_audio_card "$value" || return 1
			;;
			"output_device")
				do_set_output_device "$value" || return 1
			;;
			"volume_level")
				do_set_volume_level "$value" || return 1
			;;
			*)
				do_help
				>&2 echo "error: invalid get command ${key}"
				#print_log $LOG_FILE "ERROR" "Executing 'config_set_value()' - ##### Invalid get command ${key} #####"
				exit 1
	esac
}

get_audio_cards()
{
	#print_log $LOG_FILE "INFO" "Executing 'get_audio_cards()'"
	is_bluetooth_default_card
	if [ $? -eq 0 ]; then
		#print_log $LOG_FILE "INFO" "Executing 'get_audio_cards()' - BLUETOOTH audio card"
		echo "BLUETOOTH AUDIO"
		return
	fi

	local audio_cards="DEFAULT"

	is_bluetooth_audio_connected
	if [ $? -eq 0 ]; then
		#print_log $LOG_FILE "INFO" "Executing 'get_audio_cards()' - Bluetooth audio device connected, added Bluetooth audio card"
		audio_cards+="\BLUETOOTH AUDIO"
	fi

	is_hdmi_audio_connected
	if [ $? -eq 0 ]; then
		#print_log $LOG_FILE "INFO" "Executing 'get_audio_cards()' - HDMI audio device connected, added HDMI audio card"
		audio_cards+="\nHDMI"
	fi

	is_usb_audio_connected
	if [ $? -eq 0 ]; then
		#print_log $LOG_FILE "INFO" "Executing 'get_audio_cards()' - USB audio device connected, added USB Audio card"
		audio_cards+="\nUSB AUDIO"
	fi

	#print_log $LOG_FILE "INFO" "Executing 'get_audio_cards()' - Audio cards: '$audio_cards'"
	echo -e "$audio_cards"
}

get_audio_device()
{
	#print_log $LOG_FILE "INFO" "Executing 'get_audio_device()'"
	is_bluetooth_default_card
	if [ $? -eq 0 ]; then
		# bluetooth audio device
		local bt_value=`es-bluetooth audio_device_connected`
		#print_log $LOG_FILE "DEBUG" "get_audio_device() - bluetooth audio device, value: '$bt_value'"
		echo "$bt_value"
		return
	fi

	is_hdmi_default_card
	if [ $? -eq 0 ]; then
		#print_log $LOG_FILE "INFO" "Executing 'get_audio_device()' - HDMI audio device"
		echo "HDMI"
		return
	fi

	is_usb_audio_default_card
	if [ $? -eq 0 ]; then
		# usb audio card
		audio_device=`awk -F'[][]' '{ print $2 }' <(aplay -l | grep -i usb)`
		#print_log $LOG_FILE "DEBUG" "Executing get_audio_device() - Getting USB AUDIO output device: '$audio_device'"
		echo "${audio_device^^}"
		return
	fi

	local audio_device=`awk -F'[],]' '{ print $2 }' <(aplay -l | grep -i rk817)`
	echo "${audio_device^^}"
	#print_log $LOG_FILE "DEBUG" "get_audio_device() - audio device, value: '$audio_device'"
}

get_volume_control()
{
	#print_log $LOG_FILE "INFO" "Executing 'get_volume_control()'"
	is_bluetooth_default_card
	if [ $? -eq 0 ]; then
		# bluetooth audio device
		local bt_value=`es-bluetooth audio_device_connected`
		#print_log $LOG_FILE "DEBUG" "get_volume_control() - bluetooth volume control, value: '$bt_value'"
		echo "$bt_value"
		return
	fi

	#print_log $LOG_FILE "DEBUG" "get_volume_control() - volume control, value: 'Master'"
	echo "Master"
}

get_output_devices()
{
	#print_log $LOG_FILE "INFO" "Executing 'get_output_devices()'"

	is_bluetooth_default_card || is_hdmi_default_card || is_usb_audio_default_card
	if [ $? -eq 0 ]; then
		# USB audio device, skip
		local output_device="$(get_output_device)"
		#print_log $LOG_FILE "INFO" "get_output_devices() - output devices: '$output_device'"
		echo -e "${output_device^^}"
		return
	fi

	local output_devices=""
	local od_data=`amixer cget name='Playback Path' 2> /dev/null | grep -wi 'item'`
	[[ ! -z $(echo "$od_data" | grep -iw 'OFF') ]] && output_devices+="OFF\n"
	[[ ! -z $(echo "$od_data" | grep -iw 'SPK') ]] && output_devices+="SPK\n"
	[[ ! -z $(echo "$od_data" | grep -iw 'HP') ]] && output_devices+="HP\n"
	[[ ! -z $(echo "$od_data" | grep -iw 'SPK_HP') ]] && output_devices+="SPK_HP"

	echo -e "$output_devices"
	#print_log $LOG_FILE "INFO" "Executing 'get_output_devices()' - output devices: '$output_devices'"
}

get_audio_card()
{
	#print_log $LOG_FILE "INFO" "Executing 'get_audio_card()'"

	is_bluetooth_default_card
	if [ $? -eq 0 ]; then
		# bluetooth audio device
		local bt_value=`es-bluetooth audio_device_connected`
		#print_log $LOG_FILE "DEBUG" "get_actual_audio_card() - value: 'BLUETOOTH AUDIO'"
		echo "BLUETOOTH AUDIO"
		return
	fi

	is_hdmi_default_card
	if [ $? -eq 0 ]; then
		#print_log $LOG_FILE "INFO" "Executing 'get_audio_card()' - value: 'HDMI'"
		echo "HDMI"
		return
	fi

	is_usb_audio_default_card
	if [ $? -eq 0 ]; then
		#print_log $LOG_FILE "INFO" "Executing 'get_audio_card()' - value: 'USB AUDIO'"
		echo "USB AUDIO"
		return
	fi

	echo "DEFAULT"
}

get_hw_audio_card_names()
{
	#print_log $LOG_FILE "INFO" "Executing 'get_hw_audio_card_names()'"

	local result=""

	while IFS= read -r AUDIO_CARD; do
		#print_log $LOG_FILE "DEBUG" "Executing 'get_hw_audio_card_names()' - audio card: '$AUDIO_CARD'"
		if [ -z "$AUDIO_CARD" ]; then
			#print_log $LOG_FILE "DEBUG" "Executing 'get_hw_audio_card_names()' - empty audio card, skipping ..."
			continue
		fi

		if [[ "${AUDIO_CARD,,}" == *"hdmi"* ]]; then
			#print_log $LOG_FILE "DEBUG" "Executing 'get_hw_audio_card_names()' - HDMI audio card, skipping ..."
			continue
		fi

		result+="\n$(trim "$AUDIO_CARD")"
	done <<< "$(awk -F"[:\[]" '{ print $2 }' <(aplay -l | grep "card "))"

	if [ -z "$result" ]; then
		echo ""
	else
		echo -e "${result:2:${#result}}"
	fi
	#print_log $LOG_FILE "DEBUG" "Executing 'get_hw_audio_card_names()' - result: '$result'"
}

get_hw_audio_card_name_by_index()
{
	local card_id=$1

	if [ -z "$card_id" ] || ! [[ $card_id =~ ^-?[0-9]+$ ]] || [[ $(aplay --list-devices | grep -c "card ") -le $card_id ]] || [[ $card_id -le 0 ]]; then
		# default card
		card_id="0"
	fi

	#print_log $LOG_FILE "INFO" "Executing 'get_hw_audio_card_name()' - card index: '$card_id'"
	awk '{ print $3 }' <(aplay -l | grep "card $card_id")
}

get_hw_audio_card_name_by_name()
{
	local card_name=$1

	if [ -z "$card_name" ] || [[ ${#card_name} -lt 3 ]] || [[ "${card_name,,}" == "roc"* ]]; then
		# default card
		card_name="rk817"
	fi

	#print_log $LOG_FILE "INFO" "Executing 'get_hw_audio_card_name_by_name()' - card like name: '$card_name'"
	awk '{ print $3 }' <(aplay -l | grep "card " | grep -i "$card_name")
}

get_hw_audio_card_index_by_name()
{
	local card_name=$1

	if [ -z "$card_name" ] || [[ ${#card_name} -lt 3 ]] || [[ "${card_name,,}" == "roc"* ]]; then
		# default card
		card_name="rk817"
	fi

	#print_log $LOG_FILE "INFO" "Executing 'get_hw_audio_card_name_by_name()' - card like name: '$card_name'"
	local index=$(awk '{ print $2 }' <(aplay -l | grep "card " | grep -i "$card_name"))
	index="${index/:/}"
	#print_log $LOG_FILE "INFO" "Executing 'get_hw_audio_card_name_by_name()' - card like name '$card_name' at index '$index'"
	echo "$index"
}

get_audio_info()
{
	#print_log $LOG_FILE "INFO" "Executing 'get_audio_info()'"

	local audio_card="$(get_audio_card)"
	local audio_cards="$(get_audio_cards)"
	local audio_device="$(get_audio_device)"
	local output_device="$(get_output_device)"
	local output_devices="$(get_output_devices)"

	local result="<audio_info card=\"$audio_card\" cards=\"${audio_cards//$'\n'/,}\" device=\"$audio_device\" output=\"$output_device\" outputs=\"${output_devices//$'\n'/,}\"/>"
	#print_log $LOG_FILE "INFO" "Executing 'get_audio_info()' - result: $result"
	echo "$result"
}

config_get_value()
{
	local key=$1
	local parameter=$2

	#print_log $LOG_FILE "INFO" "Executing 'config_get_value()' - key: '$key', parameter: '$parameter'"

	case "${key}" in
			"audio_info")
				get_audio_info
			;;
			"audio_cards")
				get_audio_cards
			;;
			"audio_device")
				get_audio_device
			;;
			"output_device")
				get_output_device
			;;
			"output_devices")
				get_output_devices
			;;
			"volume_level")
				do_get_volume_level
			;;
			"volume_control")
				get_volume_control
			;;
			"audio_card")
				get_audio_card
			;;
			"hw_audio_card_names")
				get_hw_audio_card_names
			;;
			"hw_audio_card_name_by_index")
				get_hw_audio_card_name_by_index "$parameter"
			;;
			"hw_audio_card_name_by_name")
				get_hw_audio_card_name_by_name "$parameter"
			;;
			"hw_audio_card_index_by_name")
				get_hw_audio_card_index_by_name "$parameter"
			;;
			*)
				do_help
				>&2 echo "error: invalid get command ${key}"
				#print_log $LOG_FILE "Executing 'config_get_value()' - ERROR" "##### Invalid get command ${key} #####"
				exit 1
	esac
}

do_toggle_output()
{
	#print_log $LOG_FILE "INFO" "Executing 'do_toggle_output()"

	is_bluetooth_default_card || is_hdmi_default_card || is_usb_audio_default_card
	if [ $? -eq 0 ]; then
		# Bluetooth audio device or HDMI or USB audio, skip
		#print_log $LOG_FILE "DEBUG" "do_toggle_output() - Is Bluetooth audio device or HDMI or USB audio, skip"
		return 0
	fi

	local output_device=$(get_output_device)
	#print_log $LOG_FILE "DEBUG" "do_toggle_output() - Output device: '$output_device'"

	if [[ "$output_device" = *"HP" ]]; then
		#print_log $LOG_FILE "DEBUG" "do_toggle_output() - Changing from '$output_device' to 'SPK'"
		config_set_value "output_device" "SPK"
	elif [ "$output_device" = "SPK" ]; then
		#print_log $LOG_FILE "DEBUG" "do_toggle_output() - Changing from '$output_device' to 'HP'"
		config_set_value "output_device" "HP"
	fi

	return 0
}

do_config_sound_card()
{
	#print_log $LOG_FILE "INFO" "Executing 'do_config_sound_card()"

	is_hdmi_audio_connected
	if [ $? -eq 0 ]; then
		# HDMI audio device connected, the default the audio card at 0 index

		local scard="$(get_es_settings_property 'hdmi.sound.card')"
		if [ ! -z "$scard" ]; then
			#print_log $LOG_FILE "INFO" "do_config_sound_card() - The HDMI mode actived. ES 'hdmi.sound.card' value '$scard'."
			do_set_audio_card "$scard"
			if [ $? -eq 0 ]; then
				[[ "$scard" != *"DEFAULT"* ]] && return 0
				local sodevice="$(get_es_settings_property 'hdmi.sound.output.device')"
				[ -z "$sodevice" ] && return 0

				#print_log $LOG_FILE "INFO" "do_config_sound_card() - The HDMI mode actived. ES 'hdmi.sound.output.device' value '$sodevice'."
				do_set_output_device "$sodevice" && return 0
			fi
		fi
	fi

	is_bluetooth_audio_connected
	if [ $? -eq 0 ]; then
		# BT audio device connected
		do_set_audio_card BLUETOOTH && return 0 || return 1
	fi

	is_headphone_connected
	if [ $? -eq 0 ]; then
		#print_log $LOG_FILE "INFO" "do_config_sound_card() - Headphone connected, switching to default audio card (RK817)."
		do_set_audio_card DEFAULT
		if [ $? -eq 0 ]; then
			#print_log $LOG_FILE "INFO" "do_config_sound_card() - switching to headphones."
			do_set_output_device "HP"
			if [ $? -eq 0 ]; then
				#print_log $LOG_FILE "INFO" "do_config_sound_card() - setting headphones volume to 60%."
				do_set_volume_level 60
				return 0
			fi
		fi
	fi

	is_usb_audio_connected
	if [ $? -eq 0 ]; then
		# usb audio device connected
		do_set_audio_card USB && return 0 || return 1
	fi

	is_hdmi_audio_connected
	if [ $? -eq 0 ]; then
		# HDMI audio device connected, the default the audio card at 0 index
		do_set_audio_card HDMI && return 0 || return 1
	fi

	do_set_audio_card DEFAULT && return 0 || return 1
}

# ******************************************************************************************

# Configure ES commons variables
. es-log_scripts

LOG_FILE="$ES_SCRIPT_LOGS_DIR/es-sound.log"
ALSA_CFG_FILE="$USER_HOME_PATH/.asoundrc"
ALSA_DEFAULT_CFG_FILE="$USER_HOME_PATH/.asoundrcbak"
ALSA_BT_CFG_FILE="$USER_HOME_PATH/.asoundrcbt"
ALSA_TEMPLATE_CFG_FILE="$USER_HOME_PATH/.asoundrc-template"

#if [ -f "$LOG_FILE" ]; then
#  mv "$LOG_FILE" "$LOG_FILE.bak"
#fi

exit_execution()
{
    local return=$1
    local param1=$2
    local param2=$3
    #print_log $LOG_FILE "INFO" "##### Exit executing operation: '$ACTION $param1 $param2', result: '$return' #####"
    exit $return
}

if [ $# -eq 0 ]; then
  do_help
  exit 1
fi

ACTION=$1
shift

#print_log $LOG_FILE "INFO" "##### Executing operation: '${ACTION} $1 $2' #####"

case "${ACTION}" in
    "set")
        config_set_value "$1" "$2" || exit_execution 1 "$1" "$2"
    ;;
    "get")
        config_get_value "$1" "$2"
    ;;
    "toggle")
        do_toggle_output || exit_execution 1
    ;;
    "is_usb_audio_connected")
        is_usb_audio_connected || exit_execution 1
    ;;
    "is_usb_audio_default_card")
        is_usb_audio_default_card || exit_execution 1
    ;;
    "is_hdmi_audio_connected")
        is_hdmi_audio_connected || exit_execution 1
    ;;
    "is_hdmi_default_card")
        is_hdmi_default_card || exit_execution 1
    ;;
    "is_bluetooth_audio_connected")
        is_bluetooth_audio_connected || exit_execution 1
    ;;
    "is_bluetooth_default_card")
        is_bluetooth_default_card || exit_execution 1
    ;;
    "is_rk817_default_card")
        is_rk817_default_card || exit_execution 1
    ;;
    "config_sound_card")
        do_config_sound_card || exit_execution 1
    ;;
    *)
        do_help
        >&2 echo "error: invalid command ${ACTION}"
        #print_log $LOG_FILE "ERROR" "##### Invalid command ${ACTION} #####"
        exit 1
esac

exit_execution 0 "$1" "$2"
