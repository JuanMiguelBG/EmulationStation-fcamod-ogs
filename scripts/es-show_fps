#!/bin/bash

do_help()
{
	if [ ! "$1" ];then
		printf "usage : es-show_fps set [key] [value] | get [key]\n"
		printf "Valid keys: fps_show\n"
	fi
}

config_set_ra_property()
{
	local key=$1
	local value=$2

	#print_log $LOG_FILE "INFO" "Executing 'config_set_ra_property()' - setting '$key' with value '$value'"

	set_ra_property "$RA_CONFIG_FILE" "$key" "$value"
	set_ra_property "$RA32_CONFIG_FILE" "$key" "$value"
}

config_get_ra_property()
{
	local key=$1

	local value=$(get_ra_property "$RA_CONFIG_FILE" "$key")
	#print_log $LOG_FILE "INFO" "Executing 'config_get_ra_property()' - getting '$key' with value '$value'"
	echo "$value"
}

config_set_value()
{
	local key=$1
	local value=$2

	config_set_ra_property "$key" "$value"
}

config_get_value()
{
	local key=$1

	config_get_ra_property "$key"
}


# ******************************************************************************************

# Configure ES commons variables
. es-log_scripts

LOG_FILE="$ES_SCRIPT_LOGS_DIR/es-show_fps.log"

#if [ -f "$LOG_FILE" ]; then
#  mv "$LOG_FILE" "$LOG_FILE.bak"
#fi

exit_execution()
{
    local return=$1
    local param1=$2
    local param2=$3
    #print_log $LOG_FILE "INFO" "##### Exit executing operation: '$ACTION $param1 $param2', exit code: '$return' #####"
    exit $return
}

if [ $# -eq 0 ]; then
  do_help
  exit 1
fi

ACTION=$1
shift

#print_log $LOG_FILE "INFO" "##### Executing operation: '$ACTION $1 $2' #####"

case "${ACTION}" in
    "set")
        config_set_value "$1" "$2" || exit_execution 1 "$1" "$2"
    ;;
    "get")
        config_get_value "$1" || exit_execution 1 "$1"
    ;;
    *)
        do_help
        >&2 echo "error: invalid command ${ACTION}"
        #print_log $LOG_FILE "ERROR" "##### Invalid command ${ACTION} #####"
        exit 1
esac

exit_execution 0 "$1" "$2"
