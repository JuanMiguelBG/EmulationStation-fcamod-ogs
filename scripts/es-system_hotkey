#!/bin/bash

do_help()
{
	echo "usage : $0 [set key value|get key]\n"
	echo "Valid keys: brightness, volume, wifi, bluetooth, speaker and suspend"
	echo "Valid values: enabled and disabled"
	echo ""
	echo "or"
	echo ""
	echo "usage : $0 set_all_values [brightness_value] [brightness_step_value] [volume_value] [volume_step_value] [wifi_value] [bluetooth_value] [speaker_value] [suspend_value]"
	echo "Valid values: enabled and disabled"
	echo ""
	echo "or"
	echo ""
	echo "usage :$0 get_all_values"
}

config_set_value()
{
	local key=$1
	local value=$2

	#print_log $LOG_FILE "INFO" "Executing 'config_set_value()' - key: '$key', value: '$value'"

	[ -z "$value" ] && value=0
	cat "$configFile" | grep -iw "$key" > /dev/null
	local valPresent=$?

	if [ "$valPresent" != "0" ]; then
		echo "$key=$value" | sudo tee -a "$configFile" > /dev/null
	else
		sudo sed -i "s/#\?$key=.*/$key=$value/g" "$configFile" > /dev/null
	fi

	#print_log $LOG_FILE "DEBUG" "Executing 'config_set_value()' - restarting 'oga_events' service"
	sudo systemctl restart oga_events.service --quiet &
}

config_get_value()
{
	local key=$1

	#print_log $LOG_FILE "INFO" "Executing 'config_get_value()' - key: '$key'"

	local value=`sed -rn "s/^$key=([^\n]+)$/\1/p" "$configFile"`
	#print_log $LOG_FILE "DEBUG" "Executing 'config_get_value()' - key: '$key', value: '$value'"
	echo "$value"
}

config_set_all_values()
{
	#print_log $LOG_FILE "INFO" "Executing 'config_set_all_values()' - brightness: '$1', brightness_step: '$2', volume: '$3', volume_step: '$4', wifi: '$5', bluetooth: '$6', speaker: '$7', suspend: '$8'"
	config_file $1 $2 $3 $4 $5 $6 $7 $8

	#print_log $LOG_FILE "DEBUG" "Executing 'config_set_all_values()' - restarting 'oga_events' service"
	sudo systemctl restart oga_events.service --quiet &
}

config_file()
{
	echo -e "#The powerkey configuration file\nbrightness=$1\nbrightness_step=$2\nvolume=$3\nvolume_step=$4\nwifi=$5\nbluetooth=$6\nspeaker=$7\nsuspend=$8\nes_home_path=$ES_HOME_PATH\nes_brigthness_lock_file=$ES_BRIGTHNESS_LOCK_FILE\n" | sudo tee "$configFile" > /dev/null
}

do_get_all_values()
{
	#print_log $LOG_FILE "INFO" "Executing 'do_get_all_values()'"

	source $configFile
	local result="$brightness;$brightness_step;$volume;$volume_step;$wifi;$bluetooth;$speaker;$suspend"

	#print_log $LOG_FILE "DEBUG" "Executing 'do_get_all_values()' - values: $result"
	echo "$result"
}

# ******************************************************************************************

# Configure ES commons variables
. es-log_scripts

LOG_FILE="$ES_SCRIPT_LOGS_DIR/es-system_hotkey.log"

#if [ -f "$LOG_FILE" ]; then
#  mv "$LOG_FILE" "$LOG_FILE.bak"
#fi

exit_execution()
{
    local return=$1
    local param1=$2
    local param2=$3
    local param3=$4
    local param4=$5
    local param5=$6
    local param6=$7
    local param7=$8
    local param8=$9
    #print_log $LOG_FILE "INFO" "##### Exit executing operation: '$ACTION $param1 $param2 $param3 $param4 $param5 $param6 $param7 $param8', result: '$return' #####"
    exit $return
}

if [ $# -eq 0 ]; then
  do_help
  exit 1
fi

configFile="/usr/local/etc/ogage.conf"

ACTION=$1
shift

#print_log $LOG_FILE "INFO" "##### Executing operation: '${ACTION} $1 $2 $3 $4 $5 $6 $7 $8' #####"

if [ ! -f "$configFile" ]; then
  #print_log $LOG_FILE "WARNING" "OGAGE configuration file '$configFile' doesn't exist, creating it with default values"
  config_set_all_values enabled 1 enabled 1 enabled enabled enabled enabled
fi

case "${ACTION}" in
    "set")
        config_set_value "$1" "$2" || exit_execution 1 "$1" "$2"
    ;;
    "get")
        config_get_value "$1"
    ;;
    "set_all_values")
        config_set_all_values "$1" "$2" "$3" "$4" "$5" "$7" "$7" "$8" || exit_execution 1 "$1" "$2" "$3" "$4" "$5" "$7" "$7" "$8"
    ;;
    "get_all_values")
        do_get_all_values
    ;;
    *)
        do_help
        >&2 echo "error: invalid command ${ACTION}"
        #print_log $LOG_FILE "ERROR" "##### Invalid command ${ACTION} #####"
        exit 1
esac

exit_execution 0 "$1" "$2" "$3" "$4" "$5" "$7" "$7" "$8"
