#!/bin/bash

do_help() {
    echo "$0 get_system_name" >&2
    echo "$0 get_system_version" >&2
    echo "$0 get_system_info" >&2
    echo "$0 get_base_os_info" >&2
    echo "$0 get_kernel_info" >&2
    echo "$0 get_device_name" >&2
}

is_enabled() {
    output=$(nmcli radio wifi)

    enabled=$(echo "$output" | grep enabled)

    if [ -z "$enabled" ]; then
      # disaled
      return 1
    fi

    # enabled
    return 0
}

get_system_name() {
  file=""

  if [ -f "/usr/share/plymouth/themes/text.plymouth" ]; then
    file="/usr/share/plymouth/themes/text.plymouth"
  elif [ -f "/usr/share/plymouth/themes/ubuntu-text/ubuntu-text.plymouth" ]; then
    file="/usr/share/plymouth/themes/ubuntu-text/ubuntu-text.plymouth"
  fi

  name=$(cat "$file" | grep -iw "title" | awk '{ gsub(/=/," "); print $2}')
  echo "$name"
}

get_system_version() {
  version=""

  if [ -f "/usr/share/plymouth/themes/text.plymouth" ]; then
    file="/usr/share/plymouth/themes/text.plymouth"
  elif [ -f "/usr/share/plymouth/themes/ubuntu-text/ubuntu-text.plymouth" ]; then
    file="/usr/share/plymouth/themes/ubuntu-text/ubuntu-text.plymouth"
  fi

  version=$(cat "$file" | grep -iw "title" | awk '{gsub(/=/," ")}; {for (i=3; i<NF; i++) printf $i " "; print $NF}')
  if [ -f "/opt/system/.arkosnoid/version" ]; then
    version_extra=$(cat /opt/system/.arkosnoid/version)
    version="$version $version_extra"
  fi
  echo "$version"
}

get_system_info() {
  echo "$(get_system_name) $(get_system_version)"
}

get_base_os_info() {
  base_os=""

  if [ -f "/usr/bin/hostnamectl" ]; then
    base_os=$(hostnamectl | grep -iw "system" | awk '{gsub(/=/," ")}; {for (i=3; i<NF; i++) printf $i " "; print $NF}')
  elif [ -f "/usr/share/plymouth/themes/ubuntu-text/ubuntu-text.plymouth" ]; then
    base_os=$(cat "/usr/share/plymouth/themes/ubuntu-text/ubuntu-text.plymouth" | grep -iw "title" | awk '{gsub(/=/," ")}; {for (i=2; i<NF; i++) printf $i " "; print $NF}')
  else
    base_os=$(/bin/uname)
  fi
  echo "$base_os"
}

get_kernel_info() {
  kernel=""

  if [ -f "/usr/bin/hostnamectl" ]; then
    kernel=$(hostnamectl | grep -iw "kernel" | awk '{gsub(/=/," ")}; {for (i=2; i<NF; i++) printf $i " "; print $NF}')
  else
    kernel="$(/bin/uname) $(/bin/uname -r)"
  fi
  echo "$kernel"
}

get_device_name() {
  echo "RG503"
}

get_soc_name() {
  soc=$(cat /proc/cpuinfo | grep -iw hardware | awk '{print $3 " " $4}')
  if [ -z "$var" ]
  then
      soc="Rockchip RK3566"
  fi
  echo "$soc"
}


# ******************************************************************************************


if [ $# -eq 0 ]; then
	do_help
	exit 1
fi

ACTION=$1
shift

case "${ACTION}" in
    "get_system_name")
        get_system_name
    ;;
    "get_system_version")
        get_system_version
    ;;
    "get_system_info")
        get_system_info
    ;;
    "get_base_os_info")
        get_base_os_info
    ;;
    "get_kernel_info")
        get_kernel_info
    ;;
    "get_device_name")
        get_device_name
    ;;
    "get_soc_name")
        get_soc_name
    ;;
    *)
        do_help
        >&2 echo "error: invalid command ${ACTION}"
        exit 1
esac
exit 0
