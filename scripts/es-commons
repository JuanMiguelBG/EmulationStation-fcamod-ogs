#!/bin/bash

export USER_HOME_PATH="/home/ark"
export ES_HOME_PATH="$USER_HOME_PATH/.emulationstation"
export ES_EXE_PATH="/usr/bin/emulationstation"
export ES_ETC_PATH="/etc/emulationstation"
export ES_CONFIG_FILE="$ES_HOME_PATH/es_settings.cfg"
export ES_BRIGTHNESS_LOCK_FILE="$ES_HOME_PATH/brightness.lock"
export ES_SKIP_AUDIO_BT_ONBOOT_LOCK_FILE="$ES_HOME_PATH/skip_auto_connect_bt_audio_device_onboot.lock"
export ES_PRELOAD_VLC_LOCK_FILE="$ES_HOME_PATH/preload_vlc.lock"
export SYSTEM_CONFIG_PATH="$USER_HOME_PATH/.config"
export RA_CONFIG_FOLDER="$SYSTEM_CONFIG_PATH/retroarch"
export RA_CONFIG_FILE="$RA_CONFIG_FOLDER/retroarch.cfg"
export RA32_CONFIG_FOLDER="$SYSTEM_CONFIG_PATH/retroarch32"
export RA32_CONFIG_FILE="$RA32_CONFIG_FOLDER/retroarch.cfg"
export ES_SCRIPTS_PATH="/usr/local/bin"
export ES_EVENTS_SCRIPTS_PATH="$ES_EXE_PATH/scripts"
export ES_USER_EVENTS_SCRIPTS_PATH="$ES_HOME_PATH/scripts"
export EXIST_CONNECTION_FLAG=" (**)"
export SYSTEM_VARIABLES_PATH="$SYSTEM_CONFIG_PATH/system.cfg"
export INPUT_CONTROLLERS_CONFIG_PATH="/tmp/input_controllers.cfg"

if [ -f "/opt/system/Advanced/Switch to main SD for Roms.sh" ]; then
  export ROMS_DIR="/roms2"
else
  export ROMS_DIR="/roms"
fi

#******************* ES Scripts String functions ********************
trim()
{
  local trimmed="$1"

  if [ -z "$trimmed" ]; then
    echo ""
    return
  fi

  # Strip leading spaces.
  while [[ $trimmed == ' '* ]]; do
     trimmed="${trimmed## }"
  done
  # Strip trailing spaces.
  while [[ $trimmed == *' ' ]]; do
      trimmed="${trimmed%% }"
  done

  echo "$trimmed"
}

replace()
{
  local original="$1"
  local target="$2"
  local replacement="$3"

  if [ -z "$original" ]; then
    echo ""
    return
  fi

  echo "${original/target/replacement}"
}

replace_all()
{
  local original="$1"
  local target="$2"
  local replacement="$3"

  if [ -z "$original" ]; then
    echo ""
    return
  fi

  echo "${original//target/replacement}"
}

uppercase()
{
  local string="$1"
  echo "${string^^}"
}

lowercase()
{
  local string="$1"
  echo "${string,,}"
}

#******************* END - ES Scripts String functions ********************

#******************* ES Scripts Properties functions ********************
get_es_settings_property()
{
  local property=$1
  local default_value=$2

  if [ -z "$property" ]; then
    echo ""
    return
  fi

  local value=$(cat "$ES_CONFIG_FILE" | grep "name=\"$property\"" | grep -o -P -w 'value="\K[^"]+')

  if [ -z "$value" ]; then
    value="$default_value"
  fi
  echo "$value"
}

get_es_settings_property_type()
{
  local property=$1

  [ -z "$property" ] && return

  cat "$ES_CONFIG_FILE" | grep "name=\"$property\"" | grep -o -P -w '<\K[^ ]+'
}

set_es_settings_property()
{
  local property=$1
  local value=$2
  local type=$3

  [ -z "$property" ] && return
  [ -z "$type" ] && return

  if [[ $(cat "$ES_CONFIG_FILE" | grep -c "name=\"$property\"" | grep "<$type") -gt 0 ]]; then
    # property exist, replace
    sudo sed -i "s/^<$type\s\+name=\"$property\".*/<${type} name=\"${property}\" value=\"${value}\" \/>/" "$ES_CONFIG_FILE"
    return
  fi

  # property not exist, create
  echo "<$type name=\"$property\" value=\"$value\" />" | sudo tee -a "$ES_CONFIG_FILE" > /dev/null
}

remove_es_settings_property()
{
  local property="$1"

  if [ -z "$property" ] || [[ $(cat "$ES_CONFIG_FILE" | grep -c "name=\"$property\"") -eq 0 ]]; then
    # property not exist, exit
    return
  fi

  sed -i "/$property/d" "$ES_CONFIG_FILE"
}
#******************* END - ES Scripts Properties functions ********************

#******************* RA Scripts functions ********************
get_ra_property()
{
  local config_file=$1
  local property=$2
  local default_value=$3

  if [ -z "$property" ] || [ -z "$config_file" ] || [ ! -f "$config_file" ]; then
    echo ""
    return
  fi

  local value=$(sed -rn "s/^$property[ ]*=[ ]*\"([^\n]+)\"$/\1/p" "$config_file")

  if [ -z "$value" ]; then
    value="$default_value"
  fi
  echo "$value"
}

set_ra_property()
{
	local config_file=$1
	local property=$2
	local value=$3

  if [ -z "$property" ] || [ -z "$config_file" ] || [ ! -f "$config_file" ]; then
    return
  fi

  if [[ $(cat "$config_file" | grep -ce "$property[ ]*=") -gt 0 ]]; then
    # property exist, replace
    sudo sed -i "s/#\?$property[ ]*=.*/$property = \"$value\"/g" "$config_file" > /dev/null
    return
  fi

  # property not exist, create
  echo "$property = \"$value\"" | sudo tee -a "$config_file" > /dev/null
}

remove_ra_property()
{
  local config_file=$1
  local property=$2

  if [ -z "$property" ] || [ -z "$config_file" ] || [ ! -f "$config_file" ] || [[ $(cat "$config_file" | grep -ce "$property[ ]*=") -eq 0 ]]; then
    # property not exist, exit
    return
  fi

  sed -i "/$property/d" "$config_file"
}
#******************* END - RA Scripts functions ********************
