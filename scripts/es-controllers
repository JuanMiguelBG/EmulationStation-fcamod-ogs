#!/bin/bash

do_help()
{
	echo "Usage:" >&2
	echo "" >&2
	echo "$0 get [key]" >&2
	echo "Valid keys: turbo_button, turbo_button_tate, default_controller_index, controllers_number, max_players" >&2
	echo "" >&2
}

do_get_turbo_button()
{
    local turbo_button=$(get_es_settings_property "TurboHotkeyButton")
    [ -z "$turbo_button" ] && turbo_button="LeftThumb"

    #print_log $LOG_FILE "INFO" "Executing 'do_get_turbo_button()' - ES button '$turbo_button'"
    echo "$turbo_button"
}

do_get_turbo_button_tate()
{
    local turbo_button=$(get_es_settings_property "TurboHotkeyButtonTate")
    [ -z "$turbo_button" ] && turbo_button="RightThumb"

    #print_log $LOG_FILE "INFO" "Executing 'do_get_turbo_button()' - ES button '$turbo_button'"
    echo "$turbo_button"
}


do_get_default_controller_index()
{
    #print_log $LOG_FILE "INFO" "Executing 'do_get_default_controller_index()'"
    local index="0"

    if [ -f "$INPUT_CONTROLLERS_CONFIG_PATH" ]; then
        local controller_info=$(tac "$INPUT_CONTROLLERS_CONFIG_PATH" | grep "retrogame_joypad" -m 1 -B 9999 | tac)
        index=$(echo "$controller_info" | grep "index" | head -n1 | tr -s ' ' | cut -d ' ' -f 4 | cut -d ',' -f 1)
        [ -z "$index" ] && index="0"
    fi
    #print_log $LOG_FILE "INFO" "Executing 'do_get_default_controller_index()' - at index '$index'"
    echo "$index"
}

do_get_default_controller_player()
{
    #print_log $LOG_FILE "INFO" "Executing 'do_get_default_controller_player()'"
    local player="1"

    if [ -f "$INPUT_CONTROLLERS_CONFIG_PATH" ]; then
        local controller_info=$(tac "$INPUT_CONTROLLERS_CONFIG_PATH" | grep "retrogame_joypad" -m 1 -B 9999 | tac)
        player=$(echo "$controller_info" | grep "player" | head -n1 | tr -s ' ' | cut -d ' ' -f 4 | cut -d ',' -f 1)
        [ -z "$player" ] && player="1"
    fi
    #print_log $LOG_FILE "INFO" "Executing 'do_get_default_controller_player()' - at player '$player'"
    echo "$player"
}

do_get_controllers_number()
{
    local num_controllers="0"
    [ -f "$INPUT_CONTROLLERS_CONFIG_PATH" ] && num_controllers=$(cat "$INPUT_CONTROLLERS_CONFIG_PATH" | grep "player" | wc -l)
    #print_log $LOG_FILE "INFO" "Executing 'do_get_controllers_number()' - number of controllers: '$num_controllers'"

    echo "$num_controllers"
}

do_config_get_value()
{
    local key=$1
    local controller_config_file=$2

    #print_log $LOG_FILE "INFO" "Executing 'do_config_get_value()' - key: '$key', parameter: '$parameter'"

    case "${key}" in
        "turbo_button")
            do_get_turbo_button
        ;;
        "turbo_button_tate")
            do_get_turbo_button_tate
        ;;
        "default_controller_index")
            do_get_default_controller_index
        ;;
        "default_controller_player")
            do_get_default_controller_player
        ;;
        "controllers_number")
            do_get_controllers_number
        ;;
        "max_players")
            echo "$MAX_PLAYERS"
        ;;
        *)
            do_help
            >&2 echo "error: invalid get command ${key}"
            #print_log $LOG_FILE "Executing 'do_config_get_value()' - ERROR" "##### Invalid get command ${key} #####"
            exit 1
    esac
}

# ******************************************************************************************

# Configure ES commons variables
. es-log_scripts

LOG_FILE="$ES_SCRIPT_LOGS_DIR/es-controllers.log"

ES_INPUT_CFG_FILE="$ES_ETC_PATH/es_input.cfg"
DEFAULT_CONTROLLER_NAME="retrogame_joypad"
MAX_PLAYERS=5


#if [ -f "$LOG_FILE" ]; then
#  mv "$LOG_FILE" "$LOG_FILE.bak"
#fi

exit_execution()
{
    local return=$1
    local param1=$2
    local param2=$3
    local param3=$4
    #print_log $LOG_FILE "INFO" "##### Exit executing operation: '$ACTION $param1 $param2 $param3 $param4', result: '$return' #####"
    exit $return
}

if [ $# -eq 0 ]; then
  do_help
  exit 1
fi

ACTION=$1
shift

#print_log $LOG_FILE "INFO" "##### Executing operation: '${ACTION} $1 $2 $3' #####"

case "${ACTION}" in
    "set")
        do_config_set_value "$1" "$2" "$3" || exit_execution 1 "$1" "$2" "$3"
    ;;
    "get")
        do_config_get_value "$1" "$2"
    ;;
    "remove")
        do_config_remove_value "$1" "$2"
    ;;
    *)
        do_help
        >&2 echo "error: invalid command ${ACTION}"
        #print_log $LOG_FILE "ERROR" "##### Invalid command ${ACTION} #####"
        exit 1
esac

exit_execution 0 "$1" "$2" "$3"
