#!/bin/bash

do_help() {
    echo "$0 scanlist" >&2
    echo "$0 enable" >&2
    echo "$0 disable" >&2
    echo "$0 is_enabled" >&2
    echo "$0 enable_bluetooth" >&2
    echo "$0 disable_bluetooth" >&2
    echo "$0 is_bluetooth_active" >&2
    echo "$0 is_bluetooth_enabled" >&2
    echo "$0 is_bluetooth_audio_device_connected" >&2
    echo "$0 audio_device_connected" >&2
    echo "$0 paired_devices" >&2
    echo "$0 connect_device <DEVICE_ID>" >&2
    echo "$0 disconnect_device <DEVICE_ID>" >&2
    echo "$0 delete_device_connection <DEVICE_ID>" >&2
    echo "$0 test_bluetooth" >&2
}

is_bluetooth_active() {
    #print_log $LOG_FILE "INFO" "Executing 'is_bluetooth_active()'"

    local status=`sudo systemctl is-active bluetooth`
    if [ "$status" == "active" ]; then
      # active
      #print_log $LOG_FILE "INFO" "is_bluetooth_active() - Bluetooth is active"
      return 0
    fi
    # inactive
    #print_log $LOG_FILE "INFO" "is_bluetooth_active() - Bluetooth is inactive"
    return 1
}

is_bluetooth_enabled() {
    #print_log $LOG_FILE "INFO" "Executing 'is_bluetooth_enabled()'"

    local status=`sudo systemctl is-enabled bluetooth`
    if [ "$status" == "enabled" ]; then
      # enabled
      #print_log $LOG_FILE "INFO" "is_bluetooth_enabled() - Bluetooth is enabled"
      return 0
    fi
    # disabled
    #print_log $LOG_FILE "INFO" "is_bluetooth_enabled() - Bluetooth is disabled"
    return 1
}

enable_bluetooth() {
    #print_log $LOG_FILE "INFO" "Executing 'enable_bluetooth()'"

    is_bluetooth_active
    if [ $? -eq 1 ]; then
      # inactive
      #print_log $LOG_FILE "INFO" "enable_bluetooth() - Bluetooth is inactive, activing..."
      sudo systemctl start enable_bluetooth --quiet
      sudo systemctl start bluetooth --quiet
      sudo systemctl start bluealsa --quiet
      sudo systemctl start watchforbtaudio --quiet
      sudo systemctl enable enable_bluetooth --quiet
      sudo systemctl enable bluetooth --quiet
      sudo systemctl enable bluealsa --quiet
      sudo systemctl enable watchforbtaudio --quiet
      sudo systemctl daemon-reload --quiet &
      sudo systemctl restart oga_events --quiet &
      # security fix
      bluetoothctl pairable off > /dev/null &
      bluetoothctl discoverable off > /dev/null &
    fi
}

disable_bluetooth() {
    #print_log $LOG_FILE "INFO" "Executing 'disable_bluetooth()'"

    is_bluetooth_active
    if [ $? -eq 0 ]; then
      # active
      #print_log $LOG_FILE "INFO" "disable_bluetooth() - Bluetooth is active, inactiving..."
      sudo systemctl stop watchforbtaudio --quiet
      sudo systemctl stop bluetooth --quiet
      sudo systemctl stop bluealsa --quiet
      sudo systemctl stop enable_bluetooth --quiet
      sudo systemctl disable watchforbtaudio --quiet
      sudo systemctl disable bluetooth --quiet
      sudo systemctl disable bluealsa --quiet
      sudo systemctl disable enable_bluetooth --quiet
      sudo systemctl daemon-reload --quiet &
      sudo systemctl restart oga_event --quiet &
      cp -f $USER_HOME_PATH/.asoundrcbak $USER_HOME_PATH/.asoundrc &
      # security fix
      bluetoothctl pairable > /dev/null &
      bluetoothctl discoverable > /dev/null &
    fi
}

test_bluetooth() {
    #print_log $LOG_FILE "INFO" "Executing 'test_bluetooth()'"

    is_bluetooth_active
    if [ $? -eq 1 ]; then
      echo "inactive"
    else
      echo "active"
    fi
}

do_enable() {
    #print_log $LOG_FILE "INFO" "Executing 'do_enable()'"

    enable_bluetooth
}

do_disable() {
    #print_log $LOG_FILE "INFO" "Executing 'do_disable()'"

    disable_bluetooth
}

is_enabled() {
    #print_log $LOG_FILE "INFO" "Executing 'is_enabled()'"

    if [ -z $(pidof rtk_hciattach) ]; then
      # disaled
      #print_log $LOG_FILE "INFO" "is_enabled() - Bluetooth is disabled"
      return 1
    fi

    # enabled
    #print_log $LOG_FILE "INFO" "is_enabled() - Bluetooth is enabled"
    return 0
}

is_bluetooth_audio_device_connected()
{
    #print_log $LOG_FILE "INFO" "Executing 'is_bluetooth_audio_device_connected()'"

    if [[ $(amixer scontrols | grep -c " A2DP'") -gt 0 ]] ; then
      # BT audio devices connected
      #print_log $LOG_FILE "INFO" "is_enabled() - A total of $BT_AUDIO_DEVICES_CONNECTED Bluetooth Audio Devices connected"
      return 0
    fi
    #print_log $LOG_FILE "INFO" "is_enabled() -No Bluetooth Audio Devices connected"
    # NO BT audio devices connected
    return 1
}

get_bluetooth_audio_device_connected()
{
    #print_log $LOG_FILE "INFO" "Executing 'get_bluetooth_audio_device_connected()'"

    awk -F"['\'']" '{ print $2 }' <(amixer scontrols | grep  " A2DP'")
}

do_scanlist()
{
    #print_log $LOG_FILE "INFO" "Executing 'do_scanlist()'"

    sudo systemctl stop bluetooth
    sleep 1
    sudo hciconfig hci0 down
    sleep 1
    sudo hciconfig hci0 up
    sleep 1
    sudo systemctl start bluetooth
    sleep 1

    # security fix
    bluetoothctl pairable on > /dev/null
    bluetoothctl discoverable on > /dev/null

    local bt_devices=`bluetoothctl --timeout 10 scan on | grep -E ".*NEW.* Device "`

    # security fix
    bluetoothctl pairable off  > /dev/null &
    bluetoothctl discoverable off  > /dev/null &

    local result=""

    # Set space as the delimiter
    IFS=' '
    while IFS= read -r bt_device; do
      local ITEM=${bt_device#* }
      ITEM=${ITEM#* }
      local ID=${ITEM%% *}
      local NAME=${ITEM#* }
      NAME=$(trim "$NAME")
      result="$result\n$ID $NAME"
    done <<< "$bt_devices"
    if [ -z "$result" ]; then
      echo ""
    else
      # remove first \n
      result="${result:2:${#result}}"
      echo -e "$result"
    fi

    #print_log $LOG_FILE "DEBUG" "Executing 'do_scanlist()' - result: '$result'"
}

get_paired_devices()
{
    #print_log $LOG_FILE "INFO" "Executing 'get_paired_devices()'"

    local paired_devices=`timeout 5s bluetoothctl paired-devices | grep "Device "`
    local result=""

    while read -r paired_device; do
      local ITEM=${paired_device#* }
      local ID=${ITEM%% *}
      local NAME=${ITEM#* }
      NAME=$(trim "$NAME")

      local exist=`bluetoothctl info $ID | grep "Connected: yes"`
      #print_log $LOG_FILE "DEBUG" "Executing 'do_list()' - exist: '$exist'"
      # skip empty values
      if [ ! -z "$ITEM" ]; then
        if [ ! -z "$exist" ]; then
          result="$result\n$ID $NAME$EXIST_CONNECTION_FLAG"
        else
          result="$result\n$ID $NAME"
        fi
      fi
    done <<< "$paired_devices"
    if [ -z "$result" ]; then
      echo ""
    else
      # remove first \n
      result="${result:2:${#result}}"
      echo -e "$result"
    fi

    #print_log $LOG_FILE "DEBUG" "Executing 'get_paired_devices()' - result: '$result'"
}

do_disconnect_device()
{
    local DEVICE=$1
    #print_log $LOG_FILE "INFO" "Executing 'do_disconnect_device()' to device '$DEVICE'"

    #bluetoothctl --timeout 5 scan on >> /dev/null

    local output=`bluetoothctl disconnect "$DEVICE"`
    local success=`echo "$output" | grep "Successful disconnected"`

    #print_log $LOG_FILE "INFO" "Executing 'do_disconnect_device()' to device '$DEVICE' - result: $output"
    #print_log $LOG_FILE "INFO" "Executing 'do_disconnect_device()' to device '$DEVICE' - success: $success"

    if [ -z "$success" ]; then
      # fail
      return 1
    fi

    # success
    return 0
}

do_connect_device()
{
    local DEVICE=$1
    #print_log $LOG_FILE "INFO" "Executing 'do_connect_device()' to device '$DEVICE'"

    local alreadypaired=`bluetoothctl paired-devices | grep "$DEVICE"`
    #print_log $LOG_FILE "INFO" "Executing 'do_connect_device()' checking already paired device '$DEVICE' - result: '$alreadypaired'"
    if [ ! -z "$alreadypaired" ]; then
      #print_log $LOG_FILE "INFO" "Executing 'do_connect_device()' removing already paired device '$DEVICE'"
      bluetoothctl remove "$DEVICE" >> /dev/null
    fi

    # security fix
    bluetoothctl pairable on
    #bluetoothctl discoverable on

    local output=`bluetoothctl pair "$DEVICE"`

    # security fix
    bluetoothctl pairable off > /dev/null &
    bluetoothctl discoverable off > /dev/null &

    local success=`echo "$output" | grep "Paired: yes"`

    #print_log $LOG_FILE "INFO" "Executing 'do_connect_device()' pairing device '$DEVICE' - result: '$output'"
    #print_log $LOG_FILE "INFO" "Executing 'do_connect_device()' pairing device '$DEVICE' - success: '$success'"

    if [ ! -z "$success" ]; then
      bluetoothctl trust "$DEVICE" >> /dev/null
      output=`bluetoothctl connect "$DEVICE"`
      success=`echo "$output" | grep "Successful connected"`
      #print_log $LOG_FILE "INFO" "Executing 'do_connect_device()' connecting device '$DEVICE' - result: '$output'"
      #print_log $LOG_FILE "INFO" "Executing 'do_connect_device()' pairing device '$DEVICE' - success: '$success'"
      if [ -z "$success" ]; then
        # fail
        return 1
      fi
    fi

    # success
    return 0
}

do_delete_device_connection()
{
    local DEVICE=$1
    #print_log $LOG_FILE "INFO" "Executing 'do_delete_device_connection()' to device '$DEVICE'"

    bluetoothctl untrust "$1" >> /dev/null
    bluetoothctl remove "$1" >> /dev/null
    if [ $? != 0 ]; then
      # fail
      #print_log $LOG_FILE "INFO" "Executing 'do_delete_device_connection()' fail to delete device '$DEVICE'"
      return 1
    fi

    # success
    #print_log $LOG_FILE "INFO" "Executing 'do_delete_device_connection()' success to delete device '$DEVICE'"
    return 0
}

# ******************************************************************************************

# Configure ES commons variables
. es-log_scripts

LOG_FILE="$ES_SCRIPT_LOGS_DIR/es-bluetooth.log"


#if [ -f "$LOG_FILE" ]; then
#  mv "$LOG_FILE" "$LOG_FILE.bak"
#fi


if [ $# -eq 0 ]; then
  do_help
  exit 1
fi

ACTION=$1
shift

#print_log $LOG_FILE "INFO" "##### Executing operation: $ACTION #####"

case "${ACTION}" in
    "scanlist")
        do_scanlist || exit 1
    ;;
    "enable")
        do_enable || exit 1
    ;;
    "disable")
        do_disable || exit 1
    ;;
    "enable_bluetooth")
        enable_bluetooth || exit 1
    ;;
    "disable_bluetooth")
        disable_bluetooth || exit 1
    ;;
    "is_bluetooth_active")
        is_bluetooth_active || exit 1
    ;;
    "is_bluetooth_enabled")
        is_bluetooth_enabled || exit 1
    ;;
    "is_bluetooth_audio_device_connected")
        is_bluetooth_audio_device_connected || exit 1
    ;;
    "audio_device_connected")
        get_bluetooth_audio_device_connected || exit 1
    ;;
    "paired_devices")
        get_paired_devices || exit 1
    ;;
    "disconnect_device")
        do_disconnect_device "$1" || exit 1
    ;;
    "connect_device")
        do_connect_device "$1" || exit 1
    ;;
    "delete_device_connection")
        do_delete_device_connection "$1" || exit 1
    ;;
    "test_bluetooth")
        test_bluetooth || exit 1
    ;;
    *)
        do_help
        >&2 echo "error: invalid command ${ACTION}"
        #print_log $LOG_FILE "ERROR" "##### Invalid command ${ACTION} #####"
        exit 1
esac

#print_log $LOG_FILE "INFO" "##### Exit executing operation: $ACTION #####"
exit 0
