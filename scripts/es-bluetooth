#!/bin/bash

do_help() {
    echo "$0 scan_on <TIMEOUT> (default 300 seconds)" >&2
    echo "$0 scan_off" >&2
    echo "$0 new_devices" >&2
    echo "$0 enable" >&2
    echo "$0 disable" >&2
    echo "$0 toggle" >&2
    echo "$0 is_enabled" >&2
    echo "$0 enable_bluetooth" >&2
    echo "$0 disable_bluetooth" >&2
    echo "$0 is_bluetooth_active" >&2
    echo "$0 is_bluetooth_enabled" >&2
    echo "$0 is_bluetooth_audio_device <DEVICE_ID>" >&2
    echo "$0 is_bluetooth_audio_device_connected" >&2
    echo "$0 audio_device_connected" >&2
    echo "$0 info_device <DEVICE_ID>" >&2
    echo "$0 pair_device <DEVICE_ID>" >&2
    echo "$0 paired_devices" >&2
    echo "$0 connected_devices" >&2
    echo "$0 connect_device <DEVICE_ID>" >&2
    echo "$0 disconnect_device <DEVICE_ID>" >&2
    echo "$0 disconnect_all_devices" >&2
    echo "$0 delete_device_connection <DEVICE_ID>" >&2
    echo "$0 delete_all_device_connections" >&2
    echo "$0 auto_connect_audio_device_on" >&2
    echo "$0 auto_connect_audio_device_off" >&2
    echo "$0 test_bluetooth" >&2
}

is_bluetooth_active() {
    #print_log $LOG_FILE "INFO" "Executing 'is_bluetooth_active()'"

    local status=`sudo systemctl is-active bluetooth`
    if [ "$status" == "active" ]; then
      # active
      #print_log $LOG_FILE "INFO" "is_bluetooth_active() - Bluetooth is active"
      return 0
    fi
    # inactive
    #print_log $LOG_FILE "INFO" "is_bluetooth_active() - Bluetooth is inactive"
    return 1
}

is_bluetooth_enabled() {
    #print_log $LOG_FILE "INFO" "Executing 'is_bluetooth_enabled()'"

    local status=`sudo systemctl is-enabled bluetooth`
    if [ "$status" == "enabled" ]; then
      # enabled
      #print_log $LOG_FILE "INFO" "is_bluetooth_enabled() - Bluetooth is enabled"
      return 0
    fi
    # disabled
    #print_log $LOG_FILE "INFO" "is_bluetooth_enabled() - Bluetooth is disabled"
    return 1
}

enable_bluetooth() {
    #print_log $LOG_FILE "INFO" "Executing 'enable_bluetooth()'"

    is_bluetooth_active
    if [ $? -eq 1 ]; then
      # inactive
      #print_log $LOG_FILE "INFO" "enable_bluetooth() - Bluetooth is inactive, activing..."
      sudo systemctl start enable_bluetooth --quiet
      sudo systemctl start bluetooth --quiet
      sudo systemctl start bluealsa --quiet
      sudo systemctl start watchforbtaudio --quiet &
      sudo systemctl enable enable_bluetooth --quiet &
      sudo systemctl enable bluetooth --quiet &
      sudo systemctl enable bluealsa --quiet &
      sudo systemctl enable watchforbtaudio --quiet
      sudo systemctl daemon-reload --quiet &
      sudo systemctl restart oga_events --quiet &

      # security fix
      bluetoothctl pairable off > /dev/null &
      bluetoothctl discoverable off > /dev/null &
    fi
    sudo rm -f "$ES_SKIP_AUDIO_BT_ONBOOT_LOCK_FILE" > /dev/null &
}

disable_bluetooth() {
    #print_log $LOG_FILE "INFO" "Executing 'disable_bluetooth()'"

    is_bluetooth_active
    if [ $? -eq 0 ]; then
      # active
      #print_log $LOG_FILE "INFO" "disable_bluetooth() - Bluetooth is active, inactiving..."

      # security fix
      bluetoothctl pairable off > /dev/null &
      bluetoothctl discoverable off > /dev/null &

      sudo systemctl stop watchforbtaudio --quiet
      sudo systemctl stop bluetooth --quiet
      sudo systemctl stop bluealsa --quiet
      sudo systemctl stop enable_bluetooth --quiet &
      sudo systemctl disable watchforbtaudio --quiet &
      sudo systemctl disable bluetooth --quiet &
      sudo systemctl disable bluealsa --quiet &
      sudo systemctl disable enable_bluetooth --quiet
      sudo systemctl daemon-reload --quiet &
      sudo systemctl restart oga_events --quiet &
      cp -f $USER_HOME_PATH/.asoundrcbak $USER_HOME_PATH/.asoundrc &
    fi
    sudo rm -f "$ES_SKIP_AUDIO_BT_ONBOOT_LOCK_FILE" > /dev/null &
}

test_bluetooth() {
    #print_log $LOG_FILE "INFO" "Executing 'test_bluetooth()'"

    is_bluetooth_active
    if [ $? -eq 1 ]; then
      echo "inactive"
    else
      echo "active"
    fi
}

do_enable() {
    #print_log $LOG_FILE "INFO" "Executing 'do_enable()'"

    enable_bluetooth
}

do_disable() {
    #print_log $LOG_FILE "INFO" "Executing 'do_disable()'"

    disable_bluetooth
}

is_enabled() {
    #print_log $LOG_FILE "INFO" "Executing 'is_enabled()'"

    if [ ! -z $(pidof rtk_hciattach) ]; then
      # enabled
      #print_log $LOG_FILE "INFO" "is_enabled() - Bluetooth is enabled"
      return 0
    fi

    # disabled
    #print_log $LOG_FILE "INFO" "is_enabled() - Bluetooth is disabled"
    return 1
}

do_toggle_bluetooth()
{
    #print_log $LOG_FILE "INFO" "Executing 'do_toggle_bluetooth()'"
    is_bluetooth_active
    if [ $? -eq 0 ]; then
      # active
      #print_log $LOG_FILE "INFO" "do_toggle_bluetooth() - Bluetooth is active, inactiving..."
      do_disable
    else
      # active
      #print_log $LOG_FILE "INFO" "do_toggle_bluetooth() - Bluetooth is inactive, activing..."
      do_enable
    fi
}

is_bluetooth_audio_device()
{
    local DEVICE=$1
    #print_log $LOG_FILE "INFO" "Executing 'is_bluetooth_audio_device()' - device '$DEVICE'"

    if [ -z "$DEVICE" ]; then
      return 1
    fi

    local device_data=`timeout 5s bluetoothctl info $DEVICE`
    local fail=`echo "$device_data" | grep "not available"`

    #print_log $LOG_FILE "DEBUG" "Executing 'is_bluetooth_audio_device()' - device '$DEVICE' data"
    #print_log $LOG_FILE "DEBUG" "$device_data"
    if [ ! -z "$fail" ]; then
      return 1
    fi

    local is_audio_devide=`echo "$device_data" | grep "Icon: audio-"`
    if [ ! -z "$is_audio_devide" ]; then
      # audio device
      #print_log $LOG_FILE "INFO" "Executing 'is_bluetooth_audio_device()' - device '$DEVICE' is an audio device"
      return 0
    fi

    # NO audio device
    #print_log $LOG_FILE "INFO" "Executing 'is_bluetooth_audio_device()' - device '$DEVICE' is NOT an audio device"
    return 1
}

is_bluetooth_audio_device_connected()
{
    #print_log $LOG_FILE "INFO" "Executing 'is_bluetooth_audio_device_connected()'"

    if [[ $(amixer scontrols | grep -c " A2DP'") -gt 0 ]]; then
      # BT audio devices connected
      #print_log $LOG_FILE "INFO" "is_enabled() - A total of $BT_AUDIO_DEVICES_CONNECTED Bluetooth Audio Devices connected"
      return 0
    fi
    #print_log $LOG_FILE "INFO" "is_enabled() - No Bluetooth Audio Devices connected"
    # NO BT audio devices connected
    return 1
}

get_bluetooth_audio_device_connected()
{
    #print_log $LOG_FILE "INFO" "Executing 'get_bluetooth_audio_device_connected()'"

    awk -F"['\'']" '{ print $2 }' <(amixer scontrols | grep " A2DP'")
}

do_scan_on()
{
    local TIMEOUT="$1"
    # valid natural number greater than 0 and skip non numeric expressions
    [ "$TIMEOUT" -gt 0 2>/dev/null ] || TIMEOUT="300"
    #print_log $LOG_FILE "DEBUG" "Executing 'do_scan_on()' - timeout: $TIMEOUT"

    #print_log $LOG_FILE "INFO" "do_scan_on() - Bluetooth is scanning devices ..."
    if [ "$(ps -aux | grep -c '[b]luetoothctl .*scan on')" -eq 0 ]; then
      #print_log $LOG_FILE "DEBUG" "Executing 'do_scan_on()' - launching command: bluetoothctl --timeout $TIMEOUT scan on"
      bluetoothctl discoverable on > /dev/null
      bluetoothctl --timeout $TIMEOUT scan on > /dev/null &
    fi
}

do_scan_off()
{
    #print_log $LOG_FILE "INFO" "Executing 'do_scan_off()'"

    if [ "$(ps -aux | grep -c '[b]luetoothctl .*scan on')" -gt 0 ]; then
      #print_log $LOG_FILE "DEBUG" "Executing 'do_scan_off()' - killing command running 'bluetoothctl scan on'"
      sudo kill -9 $(pidof bluetoothctl) > /dev/null
      sudo systemctl restart oga_events --quiet &

      # security fix
      bluetoothctl pairable off > /dev/null &
      bluetoothctl discoverable off > /dev/null &
    fi
}

get_new_devices_list()
{
    #print_log $LOG_FILE "INFO" "Executing 'get_new_devices_list()'"

    local bt_devices=`timeout 5s bluetoothctl devices | grep "Device "`
    #print_log $LOG_FILE "DEBUG" "Executing 'get_new_devices_list()' - devices:"
    #print_log $LOG_FILE "DEBUG" "$bt_devices"

    local result=""

    # Set space as the delimiter
    while read -r bt_device; do
      local ITEM=${bt_device#* }

      #print_log $LOG_FILE "DEBUG" "Executing 'get_new_devices_list()' - device: '$ITEM'"

      # skip empty values
      if [ -z "$ITEM" ]; then
        continue
      fi

      local ID=${ITEM%% *}
      local NAME=${ITEM#* }
      NAME=$(trim "$NAME")

      local device_data=`timeout 5s bluetoothctl info $ID`

      local is_new_device=`echo "$device_data" | grep -e "Paired: no"`
      #print_log $LOG_FILE "DEBUG" "Executing 'get_new_devices_list()' - is new device: '$is_new_device'"
      # skip knowed devices
      if [ -z "$is_new_device" ]; then
        continue
      fi

      local ICON=`echo "$device_data" | grep "Icon:" | cut -d\  -f2- | awk 1 ORS=' '`
      ICON=$(trim "$ICON")
      if [ -z "$ICON" ]; then
        ICON="unknown"
      elif [ "$ICON" == "audio-card" ]; then
        local head_phones=`echo "$device_data" | grep -iw "handsfree\|headphones\|headset"`
        if [ ! -z "$head_phones" ]; then
          ICON="audio-headphones"
        fi
      fi

      result="$result\n<device id=\"$ID\" name=\"$NAME\" type=\"$ICON\" paired=\"false\" connected=\"false\" />"
    done <<< "$bt_devices"
    if [ -z "$result" ]; then
      echo ""
    else
      # remove first \n
      result="${result:2:${#result}}"
      echo -e "$result"
    fi

    #print_log $LOG_FILE "DEBUG" "Executing 'get_new_devices_list()' - result: '$result'"
}

get_paired_devices()
{
    #print_log $LOG_FILE "INFO" "Executing 'get_paired_devices()'"

    local paired_devices=`timeout 5s bluetoothctl paired-devices | grep "Device "`
    #print_log $LOG_FILE "DEBUG" "Executing 'get_paired_devices()' - devices:"
    #print_log $LOG_FILE "DEBUG" "$paired_devices"
    local result=""

    while read -r paired_device; do
      local ITEM=${paired_device#* }

      #print_log $LOG_FILE "DEBUG" "Executing 'get_paired_devices()' - device: '$ITEM'"

      # skip empty values
      if [ -z "$ITEM" ]; then
        continue
      fi

      local ID=${ITEM%% *}
      local NAME=${ITEM#* }
      NAME=$(trim "$NAME")

      local device_data=`timeout 5s bluetoothctl info $ID`

      local fail=`echo "$device_data" | grep "not available"`
      if [ ! -z "$fail" ]; then
        continue
      fi

      local ICON=`echo "$device_data" | grep -e "Icon" | cut -d\  -f2- | awk 1 ORS=' '`
      ICON=$(trim "$ICON")
      if [ "$ICON" == "audio-card" ]; then
        local head_phones=`echo "$device_data" | grep -iw "handsfree\|headphones\|headset"`
        if [ ! -z "$head_phones" ]; then
          ICON="audio-headphones"
        fi
      fi

      local CONNECTED=`echo "$device_data" | grep "Connected:" | cut -d\  -f2- | awk 1 ORS=' '`
      CONNECTED=$(trim "$CONNECTED")
      if [ "$CONNECTED" == "yes" ]; then
        CONNECTED="true"
      else
        CONNECTED="false"
      fi

      result="$result\n<device id=\"$ID\" name=\"$NAME\" type=\"$ICON\" paired=\"true\" connected=\"$CONNECTED\" />"
    done <<< "$paired_devices"
    if [ -z "$result" ]; then
      echo ""
    else
      # remove first \n
      result="${result:2:${#result}}"
      echo -e "$result"
    fi

    #print_log $LOG_FILE "DEBUG" "Executing 'get_paired_devices()' - result: '$result'"
}

get_connected_devices()
{
    #print_log $LOG_FILE "INFO" "Executing 'get_connected_devices()'"

    local connected_devices=`timeout 5s bluetoothctl paired-devices | grep "Device "`
    #print_log $LOG_FILE "DEBUG" "Executing 'get_connected_devices()' - devices:"
    #print_log $LOG_FILE "DEBUG" "$connected_devices"
    local result=""

    while read -r connected_device; do
      local ITEM=${connected_device#* }

      #print_log $LOG_FILE "DEBUG" "Executing 'get_connected_devices()' - device: '$ITEM'"

      # skip empty values
      if [ -z "$ITEM" ]; then
        continue
      fi

      local ID=${ITEM%% *}

      local device_data=`timeout 5s bluetoothctl info $ID`

      local fail=`echo "$device_data" | grep "not available"`
      if [ ! -z "$fail" ]; then
        continue
      fi

      local is_connected=`echo "$device_data" | grep "Connected: yes"`
      #print_log $LOG_FILE "DEBUG" "Executing 'get_connected_devices()' - device '$ID' is connected: '$is_connected'"
      # skip NOT connected
      if [ -z "$is_connected" ]; then
        continue
      fi

      local NAME=${ITEM#* }
      NAME=$(trim "$NAME")
      local ICON=`echo "$device_data" | grep "Icon:" | cut -d\  -f2- | awk 1 ORS=' '`
      ICON=$(trim "$ICON")
      if [ "$ICON" == "audio-card" ]; then
        local head_phones=`echo "$device_data" | grep -iw "handsfree\|headphones\|headset"`
        if [ ! -z "$head_phones" ]; then
          ICON="audio-headphones"
        fi
      fi

      result="$result\n<device id=\"$ID\" name=\"$NAME\" type=\"$ICON\" paired=\"true\" connected=\"true\" />"
    done <<< "$connected_devices"
    if [ -z "$result" ]; then
      echo ""
    else
      # remove first \n
      result="${result:2:${#result}}"
      echo -e "$result"
    fi

    #print_log $LOG_FILE "DEBUG" "Executing 'get_connected_devices()' - result: '$result'"
}

do_disconnect_device()
{
    local DEVICE=$1
    #print_log $LOG_FILE "INFO" "Executing 'do_disconnect_device()' to device '$DEVICE'"

    if [ -z "$DEVICE" ]; then
      return 1
    fi

    local output=`bluetoothctl disconnect "$DEVICE"`
    local success=`echo "$output" | grep "Successful disconnected"`

    #print_log $LOG_FILE "DEBUG" "Executing 'do_disconnect_device()' to device '$DEVICE' - result: '$output'"
    #print_log $LOG_FILE "DEBUG" "Executing 'do_disconnect_device()' to device '$DEVICE' - success: '$success'"

    if [ ! -z "$success" ]; then
      # success
      #print_log $LOG_FILE "INFO" "Executing 'do_disconnect_device()' device '$DEVICE' successfully disconnected"
      return 0
    fi

    # fail
    #print_log $LOG_FILE "INFO" "Executing 'do_disconnect_device()' failed to discoonet device '$DEVICE'"
    return 1
}

do_disconnect_all_devices()
{
    #print_log $LOG_FILE "INFO" "Executing 'do_disconnect_all_devices()'"

    local paired_devices=`timeout 5s bluetoothctl paired-devices | grep "Device "`
    local error="false"

    while read -r paired_device; do
      local ITEM=${paired_device#* }

      # skip empty values
      if [ -z "$ITEM" ]; then
        continue
      fi

      local ID=${ITEM%% *}
      local NAME=${ITEM#* }
      NAME=$(trim "$NAME")

      local is_connected=`timeout 5s bluetoothctl info $ID | grep "Connected: yes"`
      #print_log $LOG_FILE "DEBUG" "Executing 'do_disconnect_all_devices()' - device '$ID' is connected: '$is_connected'"
      # skip NOT connected
      if [ -z "$is_connected" ]; then
        continue
      fi

      #print_log $LOG_FILE "DEBUG" "Executing 'do_disconnect_all_devices()' - disconnecting: '$ID' - '$NAME'"
      do_disconnect_device "$ID" || error="true"
    done <<< "$paired_devices"

    #print_log $LOG_FILE "DEBUG" "Executing 'do_disconnect_all_devices()' - error: $error"
    if [ "$error" == "false" ]; then
      # success
      #print_log $LOG_FILE "INFO" "Executing 'do_disconnect_all_devices()' disconnected all devices successfully"
      return 0
    fi

    # fail
    #print_log $LOG_FILE "INFO" "Executing 'do_disconnect_all_devices()' fail to disconnected all devices"
    return 1
}

get_info_device()
{
    local DEVICE=$1
    #print_log $LOG_FILE "INFO" "Executing 'get_info_device()' to device '$DEVICE'"

    local result=""

    if [ -z "$DEVICE" ]; then
      #print_log $LOG_FILE "DEBUG" "Executing 'get_info_device()' - return empty device"
      echo "<device id=\"unknown\" name=\"unknown\" type=\"unknown\" paired=\"false\" connected=\"false\" />"
      return 0
    fi

    local device_data=`timeout 5s bluetoothctl info $DEVICE`

    local fail=`echo "$device_data" | grep "not available"`
    if [ ! -z "$fail" ]; then
      #print_log $LOG_FILE "DEBUG" "Executing 'get_info_device()' - return device not available"
      echo "<device id=\"$DEVICE\" name=\"unknown\" type=\"unknown\" paired=\"false\" connected=\"false\" />"
      return 0
    fi

    local NAME=`echo "$device_data" | grep "Name:" | cut -d\  -f2- | awk 1 ORS=' '`
    NAME=$(trim "$NAME")

    local ICON=`echo "$device_data" | grep "Icon:" | cut -d\  -f2- | awk 1 ORS=' '`
    ICON=$(trim "$ICON")
    if [ -z "$ICON" ]; then
      ICON="unknown"
    elif [ "$ICON" == "audio-card" ]; then
      local head_phones=`echo "$device_data" | grep -iw "handsfree\|headphones\|headset"`
      if [ ! -z "$head_phones" ]; then
        ICON="audio-headphones"
      fi
    fi

    local PAIRED=`echo "$device_data" | grep "Paired:" | cut -d\  -f2- | awk 1 ORS=' '`
    PAIRED=$(trim "$PAIRED")
    if [ "$PAIRED" == "yes" ];then
      PAIRED="true"
    else
      PAIRED="false"
    fi

    local CONNECTED=`echo "$device_data" | grep "Connected:" | cut -d\  -f2- | awk 1 ORS=' '`
    CONNECTED=$(trim "$CONNECTED")
    if [ "$CONNECTED" == "yes" ];then
      CONNECTED="true"
    else
      CONNECTED="false"
    fi

    result="<device id=\"$DEVICE\" name=\"$NAME\" type=\"$ICON\" paired=\"$PAIRED\" connected=\"$CONNECTED\" />"
    echo "$result"
    #print_log $LOG_FILE "DEBUG" "Executing 'get_info_device()' - result: '$result'"
}

do_pair_device()
{
    local DEVICE=$1
    #print_log $LOG_FILE "INFO" "Executing 'do_pair_device()' to device '$DEVICE'"

    if [ -z "$DEVICE" ]; then
      return 1
    fi

    local alreadypaired=`bluetoothctl paired-devices | grep "$DEVICE"`
    local success=""

    #print_log $LOG_FILE "DEBUG" "Executing 'do_pair_device()' checking already paired device '$DEVICE' - result: '$alreadypaired'"

    if [ -z "$alreadypaired" ]; then
      # security fix
      bluetoothctl pairable on > /dev/null
      bluetoothctl discoverable on > /dev/null

      local output=`timeout 10s bluetoothctl pair "$DEVICE"`
      #print_log $LOG_FILE "DEBUG" "Executing 'do_pair_device()' pairing device '$DEVICE' - result: '$output'"

      # security fix
      bluetoothctl pairable off > /dev/null &
      bluetoothctl discoverable off > /dev/null &

      success=`echo "$output" | grep "Paired: yes"`
    else
      #print_log $LOG_FILE "INFO" "Executing 'do_pair_device()' device '$DEVICE' already paired"
      success="Paired: yes"
    fi
    #print_log $LOG_FILE "DEBUG" "Executing 'do_pair_device()' pairing device '$DEVICE' - success: '$success'"

    if [ ! -z "$success" ]; then
      # success
      #print_log $LOG_FILE "INFO" "Executing 'do_pair_device()' pairing to device '$DEVICE' - successfully"
      return 0
    fi

    # fail
    local error=`echo "$output" | grep -iw "failed\|error"`
    #print_log $LOG_FILE "INFO" "Executing 'do_pair_device()' pairing to device '$DEVICE' - failed, cause: '$error'"
    return 1
}

do_connect_device()
{
    local DEVICE=$1
    #print_log $LOG_FILE "INFO" "Executing 'do_connect_device()' to device '$DEVICE'"

    if [ -z "$DEVICE" ]; then
      return 1
    fi

    local alreadypaired=`bluetoothctl paired-devices | grep "$DEVICE"`
    local success=""

    #print_log $LOG_FILE "DEBUG" "Executing 'do_connect_device()' checking already paired device '$DEVICE' - result: '$alreadypaired'"

    if [ -z "$alreadypaired" ]; then
      local paired=$(do_pair_device "$DEVICE")
      if [ "$paired" == "1" ]; then
        # fail
        #print_log $LOG_FILE "INFO" "Executing 'do_connect_device()' fail to pair the device '$DEVICE"
        return 1
      fi
    fi

    local device_data=`timeout 5s bluetoothctl info $DEVICE`
    local fail=`echo "$device_data" | grep "not available"`
    if [ ! -z "$fail" ]; then
      # fail
      #print_log $LOG_FILE "INFO" "Executing 'do_connect_device()' fail to get device info '$DEVICE' - failed, cause: '$fail'"
      return 1
    fi

    local ICON=`echo "$device_data" | grep -e "Icon" | cut -d\  -f2-`
    #print_log $LOG_FILE "INFO" "Executing 'do_connect_device()' - device '$DEVICE', type: '$ICON'"
    bluetoothctl trust "$DEVICE" >> /dev/null
    output=`timeout 10s bluetoothctl connect "$DEVICE"`
    success=`echo "$output" | grep "Connection successful"`
    #print_log $LOG_FILE "DEBUG" "Executing 'do_connect_device()' connecting device '$DEVICE' - result: '$output'"
    #print_log $LOG_FILE "DEBUG" "Executing 'do_connect_device()' pairing device '$DEVICE' - success: '$success'"
    if [ ! -z "$success" ]; then
      # success
      #print_log $LOG_FILE "INFO" "Executing 'do_connect_device()' connecting to device '$DEVICE' - successfully"
      return 0
    fi

    # fail
    fail=`echo "$output" | grep -iw "failed\|error"`
    #print_log $LOG_FILE "INFO" "Executing 'do_connect_device()' fail to connect the device '$DEVICE' - failed, cause: '$fail'"
    return 1
}

do_delete_device_connection()
{
    local DEVICE=$1
    #print_log $LOG_FILE "INFO" "Executing 'do_delete_device_connection()' to device '$DEVICE'"

    bluetoothctl untrust "$1" >> /dev/null
    bluetoothctl remove "$1" >> /dev/null
    if [ $? == 0 ]; then
      # success
      #print_log $LOG_FILE "INFO" "Executing 'do_delete_device_connection()' success to delete device '$DEVICE'"
      return 0
    fi

    # fail
    #print_log $LOG_FILE "INFO" "Executing 'do_delete_device_connection()' fail to delete device '$DEVICE'"
    return 1
}

do_delete_all_device_connections()
{
    #print_log $LOG_FILE "INFO" "Executing 'do_delete_all_device_connections()'"

    local paired_devices=`timeout 5s bluetoothctl paired-devices | grep "Device "`
    local error="false"

    while read -r paired_device; do
      local ITEM=${paired_device#* }

      # skip empty values
      if [ -z "$ITEM" ]; then
        continue
      fi

      local ID=${ITEM%% *}
      local NAME=${ITEM#* }
      NAME=$(trim "$NAME")

      do_delete_device_connection "$ID" || error="true"
    done <<< "$paired_devices"

    #print_log $LOG_FILE "DEBUG" "Executing 'do_delete_all_device_connections()' - error: $error"
    if [ "$error" == "false" ]; then
      # success
      return 0
    fi

    # fail
    return 1
}

do_auto_connect_audio_device_on()
{
    #print_log $LOG_FILE "INFO" "Executing 'do_auto_connect_audio_device_on()'"

    if [ -f "$ES_SKIP_AUDIO_BT_ONBOOT_LOCK_FILE" ]; then
      #print_log $LOG_FILE "INFO" "Executing 'do_auto_connect_audio_device_on()' - skipped"
      return 0
    fi

    do_scan_on 10

    while [ "$(ps -aux | grep -c '[b]luetoothctl .*scan on')" -gt 0 ]; do

      local paired_devices=`timeout 5s bluetoothctl paired-devices | grep "Device "`

      while read -r paired_device; do
        local ITEM=${paired_device#* }

        # skip empty values
        if [ -z "$ITEM" ]; then
          #print_log $LOG_FILE "DEBUG" "Executing 'do_auto_connect_audio_device_on()' - device '$ID' empty value, skip"
          continue
        fi

        local ID=${ITEM%% *}
        local NAME=${ITEM#* }
        NAME=$(trim "$NAME")

        local device_data=`timeout 5s bluetoothctl info $ID`
        local fail=`echo "$device_data" | grep "not available"`
        if [ ! -z "$fail" ]; then
          #print_log $LOG_FILE "DEBUG" "Executing 'do_auto_connect_audio_device_on()' - device '$ID' is NOT available, skip"
          continue
        fi

        # skip no audio devices
        local is_audio_device=`echo "$device_data" | grep "Icon: audio-"`
        #print_log $LOG_FILE "DEBUG" "Executing 'do_auto_connect_audio_device_on()' - device '$ID' is_audio_device: '$is_audio_device'"
        if [ -z "$is_audio_device" ]; then
          #print_log $LOG_FILE "DEBUG" "Executing 'do_auto_connect_audio_device_on()' - device '$ID' NOT audio device, skip"
          continue
        fi

        # skip connected devices
#        local is_connected=`echo "$device_data" | grep "Connected: yes"`
#        #print_log $LOG_FILE "DEBUG" "Executing 'do_auto_connect_audio_device_on()' - device '$ID' is_connected: '$is_connected'"
#        if [ ! -z "$is_connected" ]; then
#          #print_log $LOG_FILE "DEBUG" "Executing 'do_auto_connect_audio_device_on()' - device '$ID' connected, disconnecting"
#          do_disconnect_device "$ID" || continue
#        fi

        #print_log $LOG_FILE "INFO" "Executing 'do_auto_connect_audio_device_on()' - connecting: '$ID' - '$NAME'"
        do_connect_device "$ID" && return 0
      done <<< "$paired_devices"
    done
}

do_auto_connect_audio_device_off()
{
    #print_log $LOG_FILE "INFO" "Executing 'do_auto_connect_audio_device_off()'"

    do_scan_off

    #print_log $LOG_FILE "INFO" "Executing 'do_auto_connect_audio_device_off()' - removing lock file '$ES_SKIP_AUDIO_BT_ONBOOT_LOCK_FILE'"
    sudo rm -f "$ES_SKIP_AUDIO_BT_ONBOOT_LOCK_FILE" > /dev/null &
}
# ******************************************************************************************

# Configure ES commons variables
. es-log_scripts

LOG_FILE="$ES_SCRIPT_LOGS_DIR/es-bluetooth.log"

#if [ -f "$LOG_FILE" ]; then
#  mv "$LOG_FILE" "$LOG_FILE.bak"
#fi

exit_execution()
{
    local return=$1
    local param1=$2
    #print_log $LOG_FILE "INFO" "##### Exit executing operation: '$ACTION $param1', exit code: '$return' #####"
    exit $return
}

if [ $# -eq 0 ]; then
  do_help
  exit 1
fi

ACTION=$1
shift

#print_log $LOG_FILE "INFO" "##### Executing operation: '$ACTION $1' #####"

case "${ACTION}" in
    "scan_on")
        do_scan_on || exit_execution 1
    ;;
    "scan_off")
        do_scan_off || exit_execution 1
    ;;
    "new_devices")
        get_new_devices_list || exit_execution 1
    ;;
    "enable")
        do_enable || exit_execution 1
    ;;
    "disable")
        do_disable || exit_execution 1
    ;;
    "enable_bluetooth")
        enable_bluetooth || exit_execution 1
    ;;
    "disable_bluetooth")
        disable_bluetooth || exit_execution 1
    ;;
    "toggle")
        do_toggle_bluetooth || exit_execution 1
    ;;
    "is_bluetooth_active")
        is_bluetooth_active || exit_execution 1
    ;;
    "is_bluetooth_enabled")
        is_bluetooth_enabled || exit_execution 1
    ;;
    "is_bluetooth_audio_device")
        is_bluetooth_audio_device "$1" || exit_execution 1 "$1"
    ;;
    "is_bluetooth_audio_device_connected")
        is_bluetooth_audio_device_connected || exit_execution 1
    ;;
    "audio_device_connected")
        get_bluetooth_audio_device_connected
    ;;
    "info_device")
        get_info_device "$1"
    ;;
    "pair_device")
        do_pair_device "$1" || exit_execution 1 "$1"
    ;;
    "paired_devices")
        get_paired_devices
    ;;
    "connected_devices")
        get_connected_devices
    ;;
    "disconnect_device")
        do_disconnect_device "$1" || exit_execution 1 "$1"
    ;;
    "disconnect_all_devices")
        do_disconnect_all_devices || exit_execution 1
    ;;
    "connect_device")
        do_connect_device "$1" || exit_execution 1 "$1"
    ;;
    "delete_device_connection")
        do_delete_device_connection "$1" || exit_execution 1 "$1"
    ;;
    "delete_all_device_connections")
        do_delete_all_device_connections || exit_execution 1
    ;;
    "auto_connect_audio_device_on")
        do_auto_connect_audio_device_on || exit_execution 1
    ;;
    "auto_connect_audio_device_off")
        do_auto_connect_audio_device_off || exit_execution 1
    ;;
    "test_bluetooth")
        test_bluetooth || exit_execution 1
    ;;
    *)
        do_help
        >&2 echo "error: invalid command ${ACTION}"
        #print_log $LOG_FILE "ERROR" "##### Invalid command ${ACTION} #####"
        exit 1
esac

exit_execution 0 "$1"
